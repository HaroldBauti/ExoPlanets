// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML.Trainers.FastTree;
    public partial class MLModelExoplanetas
    {
        public const string RetrainFilePath =  @"E:\Sistemas\WEB\Exo_planets\Exo_planets\wwwroot\cumulative_2025.10.02_21.48.44.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;
        public const bool RetrainAllowQuoting =  false;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader, bool allowQuoting = RetrainAllowQuoting)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader, allowQuoting);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader, bool allowQuoting)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader, allowQuoting: allowQuoting);
        }


        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrain model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"koi_score", @"koi_score"),new InputOutputColumnPair(@"koi_fpflag_nt", @"koi_fpflag_nt"),new InputOutputColumnPair(@"koi_fpflag_ss", @"koi_fpflag_ss"),new InputOutputColumnPair(@"koi_fpflag_co", @"koi_fpflag_co"),new InputOutputColumnPair(@"koi_fpflag_ec", @"koi_fpflag_ec"),new InputOutputColumnPair(@"koi_period", @"koi_period"),new InputOutputColumnPair(@"koi_impact", @"koi_impact"),new InputOutputColumnPair(@"koi_duration", @"koi_duration"),new InputOutputColumnPair(@"koi_depth", @"koi_depth"),new InputOutputColumnPair(@"koi_prad", @"koi_prad"),new InputOutputColumnPair(@"koi_teq", @"koi_teq"),new InputOutputColumnPair(@"koi_insol", @"koi_insol"),new InputOutputColumnPair(@"koi_model_snr", @"koi_model_snr"),new InputOutputColumnPair(@"koi_steff", @"koi_steff"),new InputOutputColumnPair(@"koi_slogg", @"koi_slogg"),new InputOutputColumnPair(@"koi_srad", @"koi_srad"),new InputOutputColumnPair(@"ra", @"ra"),new InputOutputColumnPair(@"dec", @"dec"),new InputOutputColumnPair(@"koi_kepmag", @"koi_kepmag")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"koi_score",@"koi_fpflag_nt",@"koi_fpflag_ss",@"koi_fpflag_co",@"koi_fpflag_ec",@"koi_period",@"koi_impact",@"koi_duration",@"koi_depth",@"koi_prad",@"koi_teq",@"koi_insol",@"koi_model_snr",@"koi_steff",@"koi_slogg",@"koi_srad",@"ra",@"dec",@"koi_kepmag"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"koi_disposition",inputColumnName:@"koi_disposition",addKeyValueAnnotationsAsText:false))      
                                    .Append(mlContext.MulticlassClassification.Trainers.OneVersusAll(binaryEstimator:mlContext.BinaryClassification.Trainers.FastTree(new FastTreeBinaryTrainer.Options(){NumberOfLeaves=4,MinimumExampleCountPerLeaf=20,NumberOfTrees=4,MaximumBinCountPerFeature=254,FeatureFraction=1,LearningRate=0.09999999999999998,LabelColumnName=@"koi_disposition",FeatureColumnName=@"Features",DiskTranspose=false}),labelColumnName: @"koi_disposition"))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
 